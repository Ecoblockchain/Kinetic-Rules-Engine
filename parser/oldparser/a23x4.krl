{"global":[{"source":"http://query.yahooapis.com/v1/public/yql?","name":"yql","type":"datasource","datatype":"JSON","cachable":{"period":"seconds","value":"1"}},{"emit":""}],"global_start_line":9,"dispatch":[{"domain":"google.com","ruleset_id":null}],"dispatch_start_col":5,"meta_start_line":2,"rules":[{"cond":{"val":"true","type":"bool"},"blocktype":"every","actions":[{"action":{"source":null,"name":"noop","args":[],"modifiers":null,"vars":null},"label":null}],"post":null,"pre":[{"rhs":"q=select%20*%20from%20csv%20where%20url%3D'http%3A%2F%2Fspreadsheets.google.com%2Fpub%3Fkey%3DrepmSxxTI9Z3KgHmGWK8Wpw%26output%3Dcsv'&format=json&callback=\n ","lhs":"query","type":"here_doc"},{"rhs":{"source":"datasource","predicate":"yql","args":[{"val":"query","type":"var"}],"type":"qualified"},"lhs":"yqlResults","type":"expr"},{"rhs":{"obj":{"val":"yqlResults","type":"var"},"args":[{"val":"$..count","type":"str"}],"name":"pick","type":"operator"},"lhs":"count","type":"expr"}],"name":"percolate","start_col":5,"emit":"setTimeout(function() {    var url_prefix = \"http://frag.kobj.net/clients/hav_percolate/images/\";    search_percolate = {};  search_percolate.defaults = {    \"name\": \"KOBJ\",    \"sep\": \"<div></div>\",    \"text_color\":\"#CCC\",    \"height\":\"100px\",    \"right_padding\" : \"15px\",    \"font_size\":\"12px\",    \"font_family\": \"Verdana, Geneva, sans-serif\",    \"resultElement\": \"li.g, li div.res\",    \"margin\" : \"0 15px\"  };      function percolate_search_results(selector){        function mk_list_item(i) {      return $K(i).attr(        {\"class\": \"KOBJ_item\"        }).css(          {\"margin-bottom\":\"15px\",  \t\"margin-left\":\"10px\"    \t});    }  \t  \tfunction mk_rm_div (anchor) {  \t    var logo_item = mk_list_item(anchor);  \t    var title = $K(\"<h2>\").text(\"Yellow Pages\").css(  \t      {\"color\": \"#676767\",  \t       \"font-size\":\"small\",  \t       \"font-family\":\"arial,sans-serif\"  \t  \t      });  \t    var top_box = $K('<ol>').css(  \t      {\"display\": \"block\"  \t       }).attr(\"id\", search_percolate.defaults.name+\"_top_box\").append(logo_item);  \t    var inner_div = $K('<div>').css(  \t      {  \t      }).append(top_box);  \t    if (search_percolate.defaults.tail_background_image){  \t      inner_div.css({  \t           \"background-image\": \"url(\" + search_percolate.defaults.tail_background_image + \")\",  \t           \"background-repeat\": \"no-repeat\",  \t           \"background-position\": \"right top\"  \t\t\t    });  \t    }  \t    var rm_div = $K('<div>').attr({\"class\":\"cxx\"}).css(  \t      {\"padding-top\": \"10px\",  \t       \"padding-left\": \"5px\",  \t       \"padding-right\": \"5px\",  \t       \"max-width\": \"48em\",  \t       \"min-height\": \"10px\"  \t      }).append(inner_div);  \t    if (search_percolate.defaults.head_background_image){  \t     rm_div.css({  \t           \"background-image\": \"url(\" + search_percolate.defaults.head_background_image +\")\",  \t           \"background-repeat\": \"no-repeat\",  \t           \"background-position\": \"98% 12px\"  \t\t\t});  \t    }  \t    return rm_div;  \t  }  \t  \t  \t  function move_item (obj) {  \t\t    if($K('#'+search_percolate.defaults.name+'_top_box').find(\"li\").is('.'+search_percolate.defaults.name+'_item')) {  \t\t      $K('#'+search_percolate.defaults.name+'_top_box').append(search_percolate.defaults.sep).append(mk_list_item(obj));  \t\t    } else {  \t\t      if($K('#YP_main').size() !== 0) {  \t\t        $K(\"#YP_main\").after(mk_rm_div(obj));  \t\t      } else if($K(\"#mbEnd\").size() !==0) {  \t\t\t$K(\"#mbEnd\").after(mk_rm_div(obj));  \t\t      } else {  \t\t        $K(\"#ssb\").after(mk_rm_div(obj));  \t\t      }  \t\t    }  \t\t  }        \tfunction append_item(foo,bar,link) {    \t\tif(bar!==null) {  \t\t\tif(link)  \t\t\t{    \t\t\t\t$K(\".s\",foo).append('<span class=\"yellowPages\"><a href=\"'+link+'\">'+bar+'</a></span>');  \t\t\t} else {  \t\t\t\tif(typeof(bar)==\"String\")  \t\t\t\t{  \t\t\t\t\t$K(\".s\",foo).append('<span class=\"yellowPages\">'+bar+'</span>');  \t\t\t\t}  \t\t\t}  \t  \t\t} else {    \t\t\tif(link) {  \t\t\t\t$K(\".s\",foo).append('<span class=\"yellowPages\"><a href=\"'+link+'\">Discounts Available</a></span>');  \t\t\t}  \t\t}      \t}  \t\t\t\t\t  \tfunction serpslurp(){  \t\t\t\tvar cloc = document.location.toString();  \t\t  \t\tvar m;  \t\tvar start = 0;  \t\ttry { m = cloc.match(/(start)=(\\d+)/);  \t\t\tstart = parseInt(m[2]);  \t\t    } catch(err) {}  \t\tvar next = (start+10).toString();  \t\tif(m) {  \t\t    cloc = cloc.replace(/start=\\d+/, \"start=\" + next);  \t\t} else {  \t\t    cloc = cloc + \"&start=\" + next;  \t\t}  \t\tcloc += \"&num=100\";  \t\treturn cloc;  \t}    \t\t$K(search_percolate.defaults.resultElement).each(function() {  \t\ttruth_test = selector(this);  \t\tlink = getLink(this);  \t\tif (truth_test !== false) {  \t\t\tmove_item(this);  \t\t\tappend_item(this,truth_test,link);  \t\t}  \t});    \t\t$K.get(serpslurp(), function(res) {  \t\t$K(search_percolate.defaults.resultElement, res).each(function() {  \t\t\ttruth_test = selector(this);  \t\t\tlink = getLink(this);  \t\t\tif (truth_test !== false) {  \t\t\t\tmove_item(this);  \t\t\t\tappend_item(this,truth_test,link);  \t\t\t}  \t\t});  \t});      }    function returnGoodJson(badJson) {  \tgoodJson = {};  \trows = badJson.query.results.row;  \tfor(var i = 0; i<count; i++) {  \t\turl = rows[i].col0;  \t\tenabled = rows[i].col1;  \t\ttext = rows[i].col2;  \t\tlink = rows[i].col3;    \t\t  \t\tgoodJson[url] = [{'text':text,'link':link,'enabled':enabled}];  \t}  \treturn goodJson;    }    spreadSheet = returnGoodJson(yqlResults);      function testToPercolate(obj) {    \tvar host = $K(obj).find(\"span.url, cite\").text();  \tvar hostAfter = KOBJ.get_host(host);  \tfor(var i = 0; i<count; i++) {  \t\tvar testErr = (typeof(spreadSheet[hostAfter]) != \"undefined\" );  \t\tif(testErr) {  \t\t\tvar testEnabled = (spreadSheet[hostAfter][0].enabled) == \"on\";  \t\t}  \t\t  \t\tif(testErr && testEnabled)  \t\t{\t  \t\t\tvar textTest = (typeof(spreadSheet[hostAfter][0].text) != \"undefined\");  \t\t\tif(textTest) {  \t\t\t\ttext = spreadSheet[hostAfter][0].text;  \t\t\t\treturn text;  \t\t\t} else {  \t\t\t\treturn true;  \t\t\t}  \t\t} else {  \t\t\treturn false;  \t\t}  \t}    }    function getLink(obj) {    \tvar host = $K(obj).find(\"span.url, cite\").text();  \tvar hostAfter = KOBJ.get_host(host);  \t  \tfor(var i = 0; i<count; i++) {  \t\tif(typeof(spreadSheet[hostAfter]) != \"undefined\") {  \t\t\tvar testErr = (typeof(spreadSheet[hostAfter][0].link) != \"undefined\" );  \t\t\tvar testEnabled = (spreadSheet[hostAfter][0].enabled) == \"on\";  \t\t}  \t\tif(testErr && testEnabled)  \t\t{\t  \t\t\tvar link = spreadSheet[hostAfter][0].link;  \t\t\treturn link;  \t\t} else {  \t\t\treturn false;  \t\t}  \t}  }    percolate_search_results(testToPercolate);    },1000);              ","state":"active","callbacks":null,"pagetype":{"event_expr":{"pattern":"/search.*(&|\\?)q=([^&]*)&","legacy":1,"type":"prim_event","vars":["foo","searchTerms"],"op":"pageview"},"foreach":[]},"start_line":14}],"meta_start_col":5,"meta":{"logging":"off","name":"Plex Percolation","meta_start_line":2,"meta_start_col":5},"dispatch_start_line":6,"global_start_col":5,"ruleset_name":"a23x4"}
