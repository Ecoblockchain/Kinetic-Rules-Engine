{"global":[],"global_start_line":null,"dispatch":[{"domain":"google.com","ruleset_id":null},{"domain":"images.google.com","ruleset_id":null},{"domain":"news.google.com","ruleset_id":null},{"domain":"books.google.com","ruleset_id":null},{"domain":"scholar.google.com","ruleset_id":null},{"domain":"blogsearch.google.com","ruleset_id":null},{"domain":"youtube.com","ruleset_id":null},{"domain":"picasaweb.google.com","ruleset_id":null},{"domain":"groups.google.com","ruleset_id":null}],"dispatch_start_col":5,"meta_start_line":2,"rules":[{"cond":{"val":"true","type":"bool"},"blocktype":"every","actions":[{"action":{"source":null,"name":"notify","args":[{"val":"wow","type":"str"},{"val":"wow","type":"str"}],"modifiers":null},"label":null}],"post":null,"pre":null,"name":"simpledb","start_col":5,"emit":"smile = \"love\";                function invokeRequest() {            \t\t    var accessKeyId = \"AKIAJVVRMWDJ54MZDJFQ\";  \t\t    var secretKey =  \"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\";              var url = generateSignedURL(\"ListDomains\", accessKeyId, secretKey, \"https://sdb.amazonaws.com\", \"2009-04-15\");  alert(url);                                                          }            function displayUrl() {              var form = document.forms[0];              var accessKeyId =  parent.navbar.getAccessKeyId();              var secretKey =  parent.navbar.getSecretAccessKey();              var url = generateSignedURL(\"ListDomains\",form, accessKeyId, secretKey, \"https://sdb.amazonaws.com\", \"2009-04-15\");                          \t\t\talert(url);          }            function displayStringToSign() {              var form = document.forms[0];              var accessKeyId =  parent.navbar.getAccessKeyId();              var secretKey =  parent.navbar.getSecretAccessKey();              var url = generateSignedURL(\"ListDomains\",form, accessKeyId, secretKey, \"https://sdb.amazonaws.com\", \"2009-04-15\");              var stringToSign = getStringToSign(url);              document.getElementById(\"preview\").innerHTML = \"<b>String To Sign:</b><p/>\" + stringToSign + \"<p/>\";              document.getElementById(\"preview\").style.display = \"block\";          }    \t\tfunction toggleDiv(elementName, parent) {  \t    var e = document.getElementById(elementName);  \t    if (e) {  \t        if ((e.style.display != 'block')) {  \t            e.style.display = 'block';   \t            e.style.position = \"absolute\";  \t            e.style.zIndex = \"1\";  \t            e.style.top = findPosY (parent) + 30 + \"px\";  \t            e.style.left = findPosX (parent) - 600 + \"px\";  \t        } else {  \t            e.style.display = 'none';   \t        }  \t    }  \t}    \tfunction toggleBlock(elementName) {  \t    var e = document.getElementById(elementName);  \t    if (e) {  \t        if ((e.style.display != 'block')) {  \t            e.style.display = 'block';   \t        } else {  \t            e.style.display = 'none';   \t        }  \t    }  \t}      \tfunction findPosX(obj) {  \t    var curleft = 0;  \t    if(obj.offsetParent)  \t        while(1) {  \t        curleft += obj.offsetLeft;  \t        if(!obj.offsetParent)  \t            break;  \t        obj = obj.offsetParent;  \t    } else if(obj.x) curleft += obj.x;  \t    return curleft;  \t}    \tfunction findPosY(obj)  {  \t    var curtop = 0;  \t    if(obj.offsetParent)  \t        while(1)  {  \t            curtop += obj.offsetTop;  \t            if(!obj.offsetParent)  \t                break;  \t            obj = obj.offsetParent;  \t    } else if(obj.y)   curtop += obj.y;  \t    return curtop;  \t}    \tfunction cloneRow(id){  \t    var node = document.getElementById(id);  \t     var clone = node.cloneNode(true);  \t    insertAfter (node, clone);  \t    crawlNode(clone, id);  \t}    \tfunction insertAfter(ref, node) {  \t    ref.parentNode.insertBefore(node, ref.nextSibling);  \t}      \tfunction parentContainer (node, level) {  \t    while (level > 0) {  \t        level = level - 1;  \t        return parentContainer (node.parentNode, level);  \t    }  \t    return node;  \t}    \tfunction crawlNode(node, idPrefix) {        \t    if (node.id) {  \t            node.id =  indexPlus (node.id, idPrefix);  \t    } else if (node.name) {  \t        node.name =  indexPlus (node.name, idPrefix);  \t    }    \t    if(node.hasChildNodes()) {    \t        for(var i=0; i<node.childNodes.length; i++) {     \t            crawlNode(node.childNodes[i], idPrefix);  \t        }                                     \t    }                                             \t}    \tfunction indexPlus (id, prefix) {  \t    return buldIndexName (id, prefix, 1);  \t}    \tfunction indexMinus (id, prefix) {  \t    return buldIndexName (id, prefix, -1);  \t}    \tfunction buldIndexName(id, prefix, num) {  \t    var index = parseInt(extractIndex(prefix));  \t    var newIndex = index + parseInt(num);  \t    var name = extractName(prefix);  \t    return id.replace (prefix, name + \"\" + (newIndex) + \"\");     \t}    \tfunction hideAddDelete(id) {    \t     var addNode = document.getElementById(id + \".Add\");  \t     var deleteNode = document.getElementById(id + \".Delete\");  \t     addNode.style.display = 'none';  \t     deleteNode.style.display = 'none';    \t     var previousNodeId =  indexPlus (id, id);  \t     var previousDeleteNode = document.getElementById(previousNodeId + \".Delete\");  \t     previousDeleteNode.style.display = '';  \t}    \tfunction extractIndex (id) {  \t    var match = /([0-9]+)$/i.exec(id);  \t    return match[1];  \t}    \tfunction extractName (id) {  \t    var match = /^(\\S+)[0-9]+$/i.exec(id);  \t    return match[1];  \t}    \tfunction showAddDelete(id) {    \t    if (isFirstIndex(id)) {  \t        var deleteNode = document.getElementById(id + \".Delete\");  \t        deleteNode.style.display = '';  \t        return;  \t     }  \t    var previousNodeId =  indexMinus (id, id);  \t    var addNode = document.getElementById(previousNodeId + \".Add\");  \t    var deleteNode = document.getElementById(previousNodeId + \".Delete\");  \t    addNode.style.display = '';  \t    deleteNode.style.display = '';    \t}    \tfunction deleteRow(id){  \t    if (isFirstIndex(id)) return;  \t    var node = document.getElementById (id);  \t      node.parentNode.removeChild(node);  \t}    \tfunction isFirstIndex(id) {  \t     var match = /([0-9]+)$/i.exec(id);  \t     return match != null && match[1] != null && match[1] == 1;  \t}      \tfunction deleteContainer(node, parentLevel) {  \t    var parent = parentContainer(node, parentLevel);  \t    deleteRow(parent.id);  \t    showAddDelete(parent.id);  \t    return false;  \t}    \tfunction addContainer(node, parentLevel) {  \t    var parent = parentContainer(node, parentLevel);  \t    cloneRow(parent.id);  \t    hideAddDelete(parent.id);  \t    return false;  \t}      \t\tDate.prototype.toISODate =  \t        new Function(\"with (this)\\n    return \" +  \t           \"getFullYear()+'-'+addZero(getMonth()+1)+'-'\" +  \t           \"+addZero(getDate())+'T'+addZero(getHours())+':'\" +  \t           \"+addZero(getMinutes())+':'+addZero(getSeconds())+'.000Z'\");    \tfunction addZero(n) {  \t    return ( n < 0 || n > 9 ? \"\" : \"0\" ) + n;  \t}    \tfunction getNowTimeStamp() {  \t    var time = new Date();  \t    var gmtTime = new Date(time.getTime() + (time.getTimezoneOffset() * 60000));  \t    return gmtTime.toISODate() ;  \t}    \tfunction ignoreCaseSort(a, b) {  \t    var ret = 0;  \t    a = a.toLowerCase();  \t    b = b.toLowerCase();  \t    if(a > b) ret = 1;  \t    if(a < b) ret = -1;  \t    return ret;  \t}    \tfunction generateV1Signature(url, key) {  \t        var stringToSign = getStringToSign(url);  \t        var signed =   b64_hmac_sha1(key, stringToSign);  \t        return signed;  \t}    \t\tfunction getStringToSign(url) {    \t    var stringToSign = \"\";  \t    var query = url.split(\"?\")[1];    \t    var params = query.split(\"&\");  \t    params.sort(ignoreCaseSort);  \t    for (var i = 0; i < params.length; i++) {  \t        var param = params[i].split(\"=\");  \t        var name =   param[0];  \t        var value =  param[1];  \t        if (name == 'Signature' || undefined  == value) continue;  \t            stringToSign += name;  \t            stringToSign += decodeURIComponent(value);  \t         }    \t    return stringToSign;  \t}    \t\tfunction generateSignedURL(actionName, accessKeyId, secretKey, endpoint, version) {  \t   var url = endpoint + \"?SignatureVersion=1&Action=\" + actionName + \"&Version=\" + encodeURIComponent(version) + \"&\";  \t   \t   \t   \t   \t   \t   \t   \t   \t   \t   \t   \t   \t   \t   \t   \t   \t   \t\turl += \"MaxNumberOfDomains=1&\";  \t   var timestamp = getNowTimeStamp();  \t   url += \"Timestamp=\" + encodeURIComponent(timestamp);    \t   url += \"&AWSAccessKeyId=\" + encodeURIComponent(accessKeyId);  \t   var signature = generateV1Signature(url, secretKey);  \t   url += \"&Signature=\" + encodeURIComponent(signature);     \t   return url;  \t}    \t\tfunction getFormFieldsFromUrl (url) {  \t    var fields  = \"\";  \t    var query = url.split(\"?\")[1];  \t    var params = query.split(\"&\");  \t    for (var i = 0; i < params.length; i++) {  \t        var param = params[i].split(\"=\");  \t        var name =   param[0];  \t        var value =  param[1];  \t         fields += \"<input type=\\\"hidden\\\" name=\\\"\"+name+\"\\\" value=\\\"\"+decodeURIComponent(value)+\"\\\">\";  \t    }  \t    return fields;  \t}    \t    \t  \tvar hexcase = 0;    \tvar b64pad  = \"=\";     \t  \tfunction hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }  \tfunction b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }  \tfunction any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }  \tfunction hex_hmac_sha1(k, d)  \t  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }  \tfunction b64_hmac_sha1(k, d)  \t  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }  \tfunction any_hmac_sha1(k, d, e)  \t  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }    \t  \tfunction sha1_vm_test()  \t{  \t  return hex_sha1(\"abc\") == \"a9993e364706816aba3e25717850c26c9cd0d89d\";  \t}    \t  \tfunction rstr_sha1(s)  \t{  \t  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));  \t}    \t  \tfunction rstr_hmac_sha1(key, data)  \t{  \t  var bkey = rstr2binb(key);  \t  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);    \t  var ipad = Array(16), opad = Array(16);  \t  for(var i = 0; i < 16; i++)  \t  {  \t    ipad[i] = bkey[i] ^ 0x36363636;  \t    opad[i] = bkey[i] ^ 0x5C5C5C5C;  \t  }    \t  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);  \t  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));  \t}    \t  \tfunction rstr2hex(input)  \t{  \t  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";  \t  var output = \"\";  \t  var x;  \t  for(var i = 0; i < input.length; i++)  \t  {  \t    x = input.charCodeAt(i);  \t    output += hex_tab.charAt((x \\>\\>\\> 4) & 0x0F)  \t           +  hex_tab.charAt( x        & 0x0F);  \t  }  \t  return output;  \t}    \t  \tfunction rstr2b64(input)  \t{  \t  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";  \t  var output = \"\";  \t  var len = input.length;  \t  for(var i = 0; i < len; i += 3)  \t  {  \t    var triplet = (input.charCodeAt(i) \\<\\< 16)  \t                | (i + 1 < len ? input.charCodeAt(i+1) \\<\\< 8 : 0)  \t                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);  \t    for(var j = 0; j < 4; j++)  \t    {  \t      if(i * 8 + j * 6 > input.length * 8) output += b64pad;  \t      else output += tab.charAt((triplet \\>\\>\\> 6*(3-j)) & 0x3F);  \t    }  \t  }  \t  return output;  \t}    \t  \tfunction rstr2any(input, encoding)  \t{  \t  var divisor = encoding.length;  \t  var remainders = Array();  \t  var i, q, x, quotient;    \t    \t  var dividend = Array(Math.ceil(input.length / 2));  \t  for(i = 0; i < dividend.length; i++)  \t  {  \t    dividend[i] = (input.charCodeAt(i * 2) \\<\\< 8) | input.charCodeAt(i * 2 + 1);  \t  }    \t    \t  while(dividend.length > 0)  \t  {  \t    quotient = Array();  \t    x = 0;  \t    for(i = 0; i < dividend.length; i++)  \t    {  \t      x = (x \\<\\< 16) + dividend[i];  \t      q = Math.floor(x / divisor);  \t      x -= q * divisor;  \t      if(quotient.length > 0 || q > 0)  \t        quotient[quotient.length] = q;  \t    }  \t    remainders[remainders.length] = x;  \t    dividend = quotient;  \t  }    \t    \t  var output = \"\";  \t  for(i = remainders.length - 1; i >= 0; i--)  \t    output += encoding.charAt(remainders[i]);    \t    \t  var full_length = Math.ceil(input.length * 8 /  \t                                    (Math.log(encoding.length) / Math.log(2)))  \t  for(i = output.length; i < full_length; i++)  \t    output = encoding[0] + output;    \t  return output;  \t}    \t  \tfunction str2rstr_utf8(input)  \t{  \t  var output = \"\";  \t  var i = -1;  \t  var x, y;    \t  while(++i < input.length)  \t  {  \t      \t    x = input.charCodeAt(i);  \t    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;  \t    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)  \t    {  \t      x = 0x10000 + ((x & 0x03FF) \\<\\< 10) + (y & 0x03FF);  \t      i++;  \t    }    \t      \t    if(x <= 0x7F)  \t      output += String.fromCharCode(x);  \t    else if(x <= 0x7FF)  \t      output += String.fromCharCode(0xC0 | ((x \\>\\>\\> 6 ) & 0x1F),  \t                                    0x80 | ( x         & 0x3F));  \t    else if(x <= 0xFFFF)  \t      output += String.fromCharCode(0xE0 | ((x \\>\\>\\> 12) & 0x0F),  \t                                    0x80 | ((x \\>\\>\\> 6 ) & 0x3F),  \t                                    0x80 | ( x         & 0x3F));  \t    else if(x <= 0x1FFFFF)  \t      output += String.fromCharCode(0xF0 | ((x \\>\\>\\> 18) & 0x07),  \t                                    0x80 | ((x \\>\\>\\> 12) & 0x3F),  \t                                    0x80 | ((x \\>\\>\\> 6 ) & 0x3F),  \t                                    0x80 | ( x         & 0x3F));  \t  }  \t  return output;  \t}    \t  \tfunction str2rstr_utf16le(input)  \t{  \t  var output = \"\";  \t  for(var i = 0; i < input.length; i++)  \t    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,  \t                                  (input.charCodeAt(i) \\>\\>\\> 8) & 0xFF);  \t  return output;  \t}    \tfunction str2rstr_utf16be(input)  \t{  \t  var output = \"\";  \t  for(var i = 0; i < input.length; i++)  \t    output += String.fromCharCode((input.charCodeAt(i) \\>\\>\\> 8) & 0xFF,  \t                                   input.charCodeAt(i)        & 0xFF);  \t  return output;  \t}    \t  \tfunction rstr2binb(input)  \t{  \t  var output = Array(input.length \\>\\> 2);  \t  for(var i = 0; i < output.length; i++)  \t    output[i] = 0;  \t  for(var i = 0; i < input.length * 8; i += 8)  \t    output[i\\>\\>5] |= (input.charCodeAt(i / 8) & 0xFF) \\<\\< (24 - i % 32);  \t  return output;  \t}    \t  \tfunction binb2rstr(input)  \t{  \t  var output = \"\";  \t  for(var i = 0; i < input.length * 32; i += 8)  \t    output += String.fromCharCode((input[i\\>\\>5] \\>\\>\\> (24 - i % 32)) & 0xFF);  \t  return output;  \t}    \t  \tfunction binb_sha1(x, len)  \t{  \t    \t  x[len \\>\\> 5] |= 0x80 \\<\\< (24 - len % 32);  \t  x[((len + 64 \\>\\> 9) \\<\\< 4) + 15] = len;    \t  var w = Array(80);  \t  var a =  1732584193;  \t  var b = -271733879;  \t  var c = -1732584194;  \t  var d =  271733878;  \t  var e = -1009589776;    \t  for(var i = 0; i < x.length; i += 16)  \t  {  \t    var olda = a;  \t    var oldb = b;  \t    var oldc = c;  \t    var oldd = d;  \t    var olde = e;    \t    for(var j = 0; j < 80; j++)  \t    {  \t      if(j < 16) w[j] = x[i + j];  \t      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);  \t      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),  \t                       safe_add(safe_add(e, w[j]), sha1_kt(j)));  \t      e = d;  \t      d = c;  \t      c = bit_rol(b, 30);  \t      b = a;  \t      a = t;  \t    }    \t    a = safe_add(a, olda);  \t    b = safe_add(b, oldb);  \t    c = safe_add(c, oldc);  \t    d = safe_add(d, oldd);  \t    e = safe_add(e, olde);  \t  }  \t  return Array(a, b, c, d, e);    \t}    \t  \tfunction sha1_ft(t, b, c, d)  \t{  \t  if(t < 20) return (b & c) | ((~b) & d);  \t  if(t < 40) return b ^ c ^ d;  \t  if(t < 60) return (b & c) | (b & d) | (c & d);  \t  return b ^ c ^ d;  \t}    \t  \tfunction sha1_kt(t)  \t{  \t  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :  \t         (t < 60) ? -1894007588 : -899497514;  \t}    \t  \tfunction safe_add(x, y)  \t{  \t  var lsw = (x & 0xFFFF) + (y & 0xFFFF);  \t  var msw = (x \\>\\> 16) + (y \\>\\> 16) + (lsw \\>\\> 16);  \t  return (msw \\<\\< 16) | (lsw & 0xFFFF);  \t}    \t  \tfunction bit_rol(num, cnt)  \t{  \t  return (num \\<\\< cnt) | (num \\>\\>\\> (32 - cnt));  \t}  \t                              ","state":"active","callbacks":null,"pagetype":{"event_expr":{"pattern":".","legacy":1,"type":"prim_event","vars":[],"op":"pageview"},"foreach":[]},"start_line":21}],"meta_start_col":5,"meta":{"logging":"off","name":"SimpleDB","meta_start_line":2,"author":"Michael Grace","description":"simple example using Amazon's SimpleDB     \n","meta_start_col":5},"dispatch_start_line":10,"global_start_col":null,"ruleset_name":"a60x21"}
