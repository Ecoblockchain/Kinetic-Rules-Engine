#!/usr/bin/perl -w

use strict;
use warnings;
use lib qw(/web/lib/perl);


use Getopt::Std;
use File::Find::Rule;
use DateTime;
use Sys::Hostname;
use File::Basename;

use Kynetx::Configure qw/:all/;


# configure KNS
Kynetx::Configure::configure();



my $web_root = get_config('WEB_ROOT') || 
    die "WEB_ROOT is undefined in the configuration";

my $log_sink = get_config('LOG_SINK');
my $log_account = get_config('LOG_ACCOUNT') || 'web';

my $GZIP = '/bin/gzip';
my $RSYNC = '/usr/bin/rsync';
my @logdirs = ("$web_root/logs/kynetx");

my $tmpdir = "$web_root/tmp/kobj-logs";
mkdir $tmpdir unless(-e $tmpdir);

# global options
use vars qw/ %opt /;
my $opt_string = 'hm:u:vf';
getopts( "$opt_string", \%opt ); # or &usage();

my $machine = $opt{'m'} || $log_sink ; #|| 'unionstation.kobj.net';
my $unique = $opt{'u'} || hostname;
my $verbose = $opt{'v'};
my $finalize = $opt{'f'} || 0;
&usage() if $opt{'h'};


my $rule = File::Find::Rule->new;

$rule->or(
    $rule->new->directory->name('*.gz')->prune->discard,
    $rule->new->file->name( '*.log' )
);


# get all the files
my @files;
for my $dir ( @logdirs ) {
    print "Looking for log files in $dir\n" if $verbose;
    push( @files, (-d $dir) ? $rule->in($dir) : $dir );
}


# sort files and remove the newest one of each type
#my @newfiles = sort {((stat($a))[10]) cmp ((stat($b))[10])} @files;
my @newfiles = sort {$b cmp $a} @files;
#pop @files unless $finalize;

my %seen;

@files = ();
foreach my $file (@newfiles) {
    my $type = basename $file;
    $type =~ s/^([A-Z]+).*/$1/;
#    print "Seeing file of type $type\n" if $verbose;
#    print "for $file, seen is true" if $seen{$type};
    if($seen{$type} || $finalize) {
	push(@files, $file);
    } else {
	$seen{$type} = 1;
	next;
    }
}

# now process the files
for my $file (@files) {
    print "Processing $file\n" if $verbose;
    system "sudo /bin/chown web $file";
    my $dir = dirname $file;
    my $name = basename $file;
    # new file name has unique machine ID
    my $nf = "$tmpdir/$unique-$name";
    system "sudo /bin/mv $file $nf" || warn "Couldn't move $file: $!";
    print "gzipping $nf\n" if $verbose;
    system  "$GZIP $nf\n";
}


my @tmpfiles = glob("$tmpdir/*.gz");
# only run rsync if there's something to transfer
if (int(@tmpfiles)) {
    my $rsync_cmd = 
	"$RSYNC -e ssh --remove-sent-files  " . 
	$tmpdir . "/*.gz " .
	$log_account . "@" . $machine . ":logs";
    print "Running $rsync_cmd\n" if $verbose;
    system $rsync_cmd
}



1;


sub usage {
    print STDERR <<EOF;

usage:  

    kobj_log_daemon -m MACHINE

Moves log files to the "logs" directory of user "web" on the specified 
machine using rsync.  The source files are deleted after they're moved.

Options are:

  -m M	: name of machine to move logs files to (default: $log_sink)
  -u U  : unique identifier for these log files (default: hostname)
  -v    : vebose
  -f    : finalize; don't skip most recent file.  Ensure Web server 
          has been halted before using this switch.  

EOF

exit;


}

