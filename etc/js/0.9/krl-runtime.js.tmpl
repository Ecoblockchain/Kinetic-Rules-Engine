
/* Sets up the call backs for "click" and "change" events */
KOBJ.obs = function(type, attr, txn_id, name, sense, rule, rid) {
    var elem;
    if(attr == 'class') {
      elem = '.'+ name;
    } else if(attr == 'id') {
      elem = '#'+ name;
    } else {
      elem = name;
    }
    if(type == 'click') {
	$K(elem).click(function(e1) {
	    var tgt = $K(this);
	    var b = tgt.attr('href') || '';
	    KOBJ.logger("click",
			txn_id,
			name,
			b,
			sense,
			rule,
			rid
	    );
            if(b) { tgt.attr('href','#KOBJ'); }  // # gets replaced by redirect
	    });

    } else if(type == 'change') {
	$K(elem).change(function(e1) {
	    KOBJ.logger("change",
			txn_id,
			name,
			'',
			sense,
			rule,
			rid
	    );
	    });
    }

};


/* Injects a javascript fragment into the page */
KOBJ.fragment = function(base_url) {
    var e=KOBJ.document.createElement("script");
    e.src=base_url;
    var body=KOBJ.document.getElementsByTagName("body")[0];
    body.appendChild(e);
};

/* Replaces the html contents of an element */
KOBJ.update_elements  = function (params) {
    for (var mykey in params) {
 	$K("#kobj_"+mykey).html(params[mykey]);
    }
};

// wrap some effects for use in embedded HTML
KOBJ.Fade = function (id) {
  $K(id).fadeOut();
};

KOBJ.BlindDown = function (id) {
  $K(id).slideDown();
};

KOBJ.BlindUp = function (id) {
  $K(id).slideUp();
};

KOBJ.BlindUp = function (id, speed) {
  $K(id).slideUp(speed);
};

KOBJ.hide = function (id) {
    $K(id).hide();
};

KOBJ.letitsnow = function(config){
	$K(KOBJ.document).snowfall();
};

//new jessie actions



KOBJ.createPopIn = function(config,content) {

	defaults = {
  	  "position": "left-center",
	   "imageLocation": "http://k-misc.s3.amazonaws.com/actions/pop_in_feedback.jpg",
	   "bg_color": "#FFFFFF",
           "link_color": "#FF0000",
	   "overlay_color": "#000000"
	};
	if (typeof config === 'object') {
		jQuery.extend(defaults, config);
	}

	var side1;
	var side2;
	var distance;

	switch(defaults["position"])
	{
	case "top-left":
		side1 = "top";
		side2 = "left";
		distance = "10%";
		break;
	case "top-center":
		side1 = "top";
		side2 = "left";
		distance = "45%";
		break;
	case "top-right":
		side1 = "top";
		side2 = "right";
		distance = "10%";
		break;
	case "bottom-left":
		side1 = "bottom";
		side2 = "left";
		distance = "10%";
		break;
	case "bottom-center":
		side1 = "bottom";
		side2 = "left";
		distance = "45%";
		break;
	case "bottom-right":
		side1 = "bottom";
		side2 = "right";
		distance = "10%";
		break;
	case "left-top":
		side1 = "left";
		side2 = "top";
		distance = "10%";
		break;
	case "left-center":
		side1 = "left";
		side2 = "top";
		distance = "45%";
		break;
	case "left-bottom":
		side1 = "left";
		side2 = "bottom";
		distance = "10%";
		break;
	case "right-top":
		side1 = "right";
		side2 = "top";
		distance = "10%";
		break;
	case "right-center":
		side1 = "right";
		side2 = "top";
		distance = "45%";
		break;
	case "right-bottom":
		side1 = "right";
		side2 = "bottom";
		distance = "10%";
		break;
	default:
		side1 = "left";
		side2 = "top";
		distance = "45%";
		break;
	}

	$K('body').append('<div id="KOBJ_PopIn_Link" style="'+side1+': 0; '+side2+':'+distance+'; -moz-border-radius-bottomright: 12px; -moz-border-radius-topright: 12px; background-color:'+defaults["link_color"]+'; display:block; margin-top:-45px; position: fixed;  z-index:100001;"><a href="javascript:KOBJ_create_pop_in()"><img src="'+defaults["imageLocation"]+'" alt="KOBJ_pop_in" border="none" /></a>');
	KOBJ_create_pop_in = function() {
		var OverlayPresent = $K('#KOBJ_PopIn_Overlay').length;
		var ContentPresent = $K('#KOBJ_PopIn_Dialog').length;

		if(OverlayPresent) {
			$K('#KOBJ_PopIn_Overlay').fadeIn('slow');
		}
		if(ContentPresent) {
			$K('#KOBJ_PopIn_Dialog').fadeIn('slow');
		}
		if(!OverlayPresent) {
			$K('body').append('<div id="KOBJ_PopIn_Overlay" style="display: block; position: fixed; background-color: '+defaults["overlay_color"]+'; height: 100%; width: 100%; left: 0; filter:alpha(opacity=70); opacity: 0.7; top: 0; z-index: 100002; display: none;" />');
			$K('#KOBJ_PopIn_Overlay').fadeIn('slow');
		}
		if(!ContentPresent) {

               // TODO: Display is overridden remove which one?
			$K('body').append('<div id="KOBJ_PopIn_Dialog" style="top: 45%; right: 40%; -moz-border-radius: 5px; display: block; height: auto; width: 20%; position: fixed; margin: 0 auto; text-align: center; z-index: 100003; display: none; background: '+defaults["bg_color"]+'; filter:alpha(opacity=85); opacity: .85; "><div class="close" id="KOBJ_Close" style="cursor: pointer; float: right; font-weight: bold; margin-right: 8px; margin-top: 5px;">x</div><div id="KOBJ_PopIn_Content" style="padding: 10px; ">'+content+'</div></div>');
		  $K("#KOBJ_Close").click(function() {KOBJ_close_pop_in();});
		  $K('#KOBJ_PopIn_Dialog').fadeIn('slow');
		}

	};

	KOBJ_close_pop_in = function() {

		$K('#KOBJ_PopIn_Overlay').fadeOut('slow');
		$K('#KOBJ_PopIn_Dialog').fadeOut('slow');

	};

};


KOBJ.statusbar = function(config,content) {

	var defaults = {


		"sticky": false,
		"width": "98.5%",
		"height": "30px",
		"id": "KOBJ_status_bar",
		"bg_color": "#222222",
		"delay": 3000,
		"position": "bottom",
		"opacity": ".8",
		"color": "#ffffff"

	};
	if (typeof config === 'object') {
		if(config["sticky"] === true) {
			config["delay"] = false;
		}
		jQuery.extend(defaults, config);

	}
		var side = "";
		var corners = "";
		var direction = "";

	switch(defaults["position"]) {
	case "top":
		side = "top";
		corners = "bottom";
		direction = "down";
		break;
	case "bottom":
		side = "bottom";
		corners = "top";
		direction = "up";
		break;
	default:
		side = "bottom";
		corners = "top";
		direction = "up";
		break;
	}


	$K('body').append('<div id="'+defaults["id"]+'_wrapper" style="display: none; position: fixed; '+side+': 0; width: 100%; height: '+defaults["height"]+';"><div id="'+defaults["id"]+'" style="color: '+defaults["color"]+'; height: '+defaults["height"]+'; background: '+defaults["bg_color"]+'; opacity: '+defaults["opacity"]+'; -moz-border-radius-'+corners+'right: 5px; -moz-border-radius-'+corners+'left: 5px; margin-left: 12px; margin-right: 30px;"><div class="close" style="float: right; font-weight: bold; font-size: 20px; cursor: pointer; margin-right: 10px; margin-top: 5px;">x</div><div class="KOBJ_statusbar_content" style="color: '+defaults["color"]+';">'+content+'</div></div>');
	$K('#'+defaults["id"]+'>.close').click(function() { KOBJ.statusbar_close(defaults["id"]); });
	$K('#'+defaults["id"]+'_wrapper').slideDown('slow');
	if(defaults["sticky"] === false) {
		setTimeout(function() {KOBJ.statusbar_close(defaults["id"]);},defaults["delay"]);
	}


};

KOBJ.statusbar_close = function(id) {
	$K('#'+id).fadeOut('slow');
};

//end new jessie actions


// helper functions used by float
KOBJ.buildDiv = function (uniq, pos, top, side) {
    var vert = top.split(/\s*:\s*/);
    var horz = side.split(/\s*:\s*/);
    var div_style = {
        position: pos,
        zIndex: '9999',
        opacity: 0.999999,
        display: 'none'
    };
    div_style[vert[0]] = vert[1];
    div_style[horz[0]] = horz[1];
    var id_str = 'kobj_'+uniq;
    var div = KOBJ.document.createElement('div');
    return $K(div).attr({'id': id_str}).css(div_style);
};

// return the host portion of a URL
KOBJ.get_host = function(s) {
 var h = "";
 try {
   h = s.match(/^(?:\w+:\/\/)?([\w-.]+)/)[1];
 } catch(err) {
 }
 return h;
};

// randomly pick a member of a list
KOBJ.pick = function(o) {
    if (o) {
        return o[Math.floor(Math.random()*o.length)];
    } else {
        return o;
    }
};

// attach a close event to an element inside a notification
KOBJ.close_notification = function(s) {
  $K(s).bind("click.kGrowl",
             function(e) {
               $K(this).unbind('click.kGrowl');
               $K(s).parents(".kGrowl-notification").trigger('kGrowl.beforeClose').animate({opacity: 'hide'}, "normal", "swing", function() {$K(this).trigger('kGrowl.close').remove();});});
};



KOBJ['data'] = KOBJ['data'] || {};

// initialization vars
//KOBJ.proto = 'http://';
//KOBJ.proto = (("https:" == KOBJ.document.location.protocol) ? "https://" : "http://");
KOBJ.proto = function(){ return (("https:" == KOBJ.location('protocol')) ? "https://" : "http://") };

KOBJ.init_host = '<TMPL_VAR NAME=INIT_HOST>';
KOBJ.eval_host = '<TMPL_VAR NAME=EVAL_HOST>';
KOBJ.callback_host = '<TMPL_VAR NAME=CB_HOST>';
<TMPL_IF KNS_PORT>
KOBJ.kns_port = ':<TMPL_VAR NAME=KNS_PORT>';
<TMPL_ELSE>
KOBJ.kns_port = '';
</TMPL_IF>

KOBJ.init = function(init_obj) {
  $K.each(init_obj,function(k,v) {
		      KOBJ[k] = v;
	  });
};



//this method is overridden in sandboxed environments
KOBJ.getwithimage = function(url){
   var i = document.createElement("img");
	i.setAttribute("src", url);
	document.body.appendChild(i);
};

//this method is overridden in sandboxed environments
KOBJ.require = function(url) {
  var r=document.createElement("script");
  r.src= url;
  r.type= "text/javascript";
//  console.log("Requiring " + url);
  var body=document.getElementsByTagName("body")[0] ||
              document.getElementsByTagName("frameset")[0] ;
  body.appendChild(r);

};

KOBJ.reload = function(delay) {
  var r=document.createElement("script");
  r.type= "text/javascript";
  r.text= "KOBJ.eval(KOBJ_config);";
  var body=document.getElementsByTagName("body")[0];
  setTimeout(function(){body.appendChild(r);},delay);
};

/*KOBJ.encodeEndpointSignature = function(endpoint){
	return endpoint.type + ":" + endpoint.name + ":" + endpoint.version;
};*/

KOBJ.eval = function(config) {
  if(! config.rids && typeof(config.rids) !== 'array') {
    return;
  }

	//create response structs
	for(var i in config.rids){
		var rid = config.rids[i];
		KOBJ[rid] = KOBJ[rid] || {};
		if(config.delayExecution){
			KOBJ[rid].delayExecution = true;
		}
	}

  KOBJ.site_id = config.rids.join(";");

  // datasets
  var data_url = KOBJ.proto()+KOBJ.init_host+KOBJ.kns_port+"/js/datasets/" + KOBJ.site_id + "/";
  KOBJ.require(data_url);

  if(typeof(kvars) != "undefined") {
    KOBJ.kvars_json = $K.toJSON(kvars);
  } else {
    KOBJ.kvars_json = '';
  }

  var d = (new Date).getTime();
  var url = KOBJ.proto()+KOBJ.eval_host+KOBJ.kns_port+"/ruleset/eval/" + KOBJ.site_id;
  KOBJ.callback_url = KOBJ.proto()+KOBJ.callback_host+KOBJ.kns_port+"/callback/" + KOBJ.site_id;

  var param_str = "";
  if(config) {
    $K.each(config,function(k,v) {
	      if(!(k == 'rids' || k == 'init')) {
		param_str += "&" + k + "=" + v;
		}
	      });
  }


/*

  if(config) {
	$K.each(config,function(k,v) {
		if(!(k === 'rids' || k === 'init' || k === 'endpoint')) {
			param_str += "&" + k + "=" + v;
		} else if(k === 'endpoint'){
			param_str += "&endpoint=" + KOBJ.encodeEndpointSignature(v);
		}
	});
  }


*/
  var eval_url = url + "/" + d + ".js?caller=" + escape(KOBJ.location('href')) + "&referer="+ escape(KOBJ.document.referrer) + "&kvars=" + escape(KOBJ.kvars_json) + "&title=" + encodeURI(KOBJ.document.title) + param_str;

  KOBJ.require(eval_url);
};

KOBJ.raise = function(config, event_type) {
  if(! config.rids && typeof(config.rids) !== 'array') {
    return;
  }

  var version = config.version || 'blue';
  var domain =  config.domain || 'web';
  event_type = event_type || 'pageview';

  //create response structs
  for(var i in config.rids){
    var rid = config.rids[i];
    KOBJ[rid] = KOBJ[rid] || {};
    if(config.delayExecution){
      KOBJ[rid].delayExecution = true;
    }
  }

  KOBJ.site_id = config.rids.join(";");

  // datasets
  // we really shouldnt be doing this on *every* event raised...
  var data_url = KOBJ.proto()+KOBJ.init_host+KOBJ.kns_port+"/js/datasets/" + KOBJ.site_id + "/";
  KOBJ.require(data_url);

  if(typeof(kvars) != "undefined") {
    KOBJ.kvars_json = $K.toJSON(kvars);
  } else {
    KOBJ.kvars_json = '';
  }

  var d = (new Date).getTime();
  var url = [KOBJ.proto() +
             KOBJ.eval_host +
	     KOBJ.kns_port,
	     version,
             'event',
	     domain,
	     event_type,
	     KOBJ.site_id,
	     d
	    ].join("/");

  KOBJ.callback_url = KOBJ.proto()+KOBJ.callback_host+KOBJ.kns_port+"/callback/" + KOBJ.site_id;

  var params = ["caller=" + escape(KOBJ.location('href')),
		"referer="+ escape(KOBJ.document.referrer),
		"kvars=" + escape(KOBJ.kvars_json),
		"title=" + encodeURI(KOBJ.document.title)
	       ];
  
  if(config) {
    $K.each(config,function(k,v) {
      if(!(k == 'rids' || k == 'init')) {
	params.push(k + "=" + v);
      }
    });
  }

  var event_url = url + "?" +  params.join("&");

  KOBJ.require(event_url);
}; // end of KOBJ.raise

//start closure and data registration code
KOBJ.registerDataSet = function(rid, datasets){
	KOBJ.log("registering dataset " + rid);
	//KOBJ.data[rid] = datasets;
	KOBJ[rid] = KOBJ[rid] || {};
	KOBJ[rid].dataLoaded = true;
	KOBJ.executeWhenReady(rid);
   //if(KOBJ[rid].pendingClosure){
   //    var rseclosure = KOBJ[rid].pendingClosure;
   //    //KOBJ[rid].pendingClosure = null;
   //    KOBJ.executeClosure(rid, rseclosure);
   //}
};

KOBJ.registerClosure = function(rid, closure){
	KOBJ.log("registering closure " + rid);
	KOBJ[rid] = KOBJ[rid] || {};
	KOBJ[rid].pendingClosure = closure;
	KOBJ.executeWhenReady(rid);
	//if(KOBJ[rid] && KOBJ[rid].dataLoaded){
	//	KOBJ.executeClosure(rid, closure);
	//}
};
KOBJ.clearExecutionDelay = function(rid){
	KOBJ[rid] = KOBJ[rid] || {};
	KOBJ[rid].delayExecution = false;
	KOBJ.executeWhenReady(rid);
};
KOBJ.executeWhenReady = function(rid){
	if(KOBJ[rid].delayExecution) { return; }
	if(KOBJ[rid].dataLoaded && KOBJ[rid].pendingClosure){
		var rseclosure = KOBJ[rid].pendingClosure;
		KOBJ.executeClosure(rid, rseclosure);
	}
};

KOBJ.executeClosure = function(rid, closure){
	KOBJ.log("executing closure " + rid);
	closure();
	KOBJ.log("execution complete " + rid);
};
//end closure and data registration code

KOBJ.runit = function(){
 if(typeof(KOBJ_config) == 'object') {
  if(typeof(KOBJ_config.init) == 'object') {
    KOBJ.init(KOBJ_config.init);
  }
//  KOBJ.eval(KOBJ_config);
  KOBJ.raise(KOBJ_config, 'pageview');
 }
};

KOBJ.logVerify = function(txn, appid, cluster){
		/*var i = document.createElement("img");
		i.setAttribute("src", KOBJ.proto() + "kverify.appspot.com/log?txn="+txn+"&appid="+appid+"&cluster="+cluster);
		document.body.appendChild(i);
		*/
	KOBJ.getwithimage(KOBJ.proto() + "kverify.appspot.com/log?txn="+txn+"&appid="+appid+"&cluster="+cluster);
};

//see if page is already loaded (ex: tags planted AFTER dom ready) to know if we should wait for document onReady
//this code block is adapted from swfObject code used for the same purpose
if (typeof KOBJSandboxEnvironment === "undefined" || KOBJSandboxEnvironment !== true) { //sandbox bootstrap prevention
     // Check to see if the runtime is already initialized by checking the KOBJ_LOADED variable.  If it is defined then we have been loaded
     //if (typeof(window["KRL_LOADED"]) == "undefined") {
     //	window["KRL_LOADED"] = true;
		if ((typeof document.readyState != "undefined" && document.readyState == "complete") || (typeof document.readyState == "undefined" && (document.getElementsByTagName("body")[0] || document.body))) {
	  		KOBJ.runit(); //dom ready
		} else {
  			$K(KOBJ.runit); //dom not ready
		}	
	//}
}

//jQuery.noConflict(); //testing extreme
