


;

var $K = jQuery.noConflict();


var KOBJ= KOBJ ||
  { name: "KRL Runtime Library",
    version: '0.9',
    copyright: "Copyright 2007-2009, Kynetx Inc.  All Rights reserved."
  };

KOBJ._log = new Array();
KOBJ.log = function(msg){
	KOBJ._log.push({'ts':new Date(),'msg':msg});
	if(window.console != undefined && console.log != undefined){ console.log(msg); }
};

KOBJ.annotate_search_results = function(annotate, config, cb) {
  var defaults = {
    "name": "KOBJ",
    "sep": "<div style='padding-top: 13px'>|</div>",
    "text_color": "#CCC",
    "height": "40px",
    "left_margin": "15px",
    "right_padding": "15px",
    "font_size": "12px",
    "font_family": "Verdana, Geneva, sans-serif",
    "results_lister" : "li.g, div.g, li div.res, #results>ul>li, #sw_main>.sr_dcard",
    "element_to_modify" : "div.s,div.abstr,p",
    "placement" : 'prepend',
    "outer_div_css" : 0,
    "inner_div_css" : 0,
    "li_css" : 0,
    "ul_css" : 0
  };
  if (typeof config === 'object') {
      jQuery.extend(defaults, config);
  }
  // these have to occur after the config has been updated
  defaults.outer_div_css = defaults.outer_div_css || {
      "float": "right",
      "width": "auto",
      "height": defaults.height,
      "font-size": defaults.font_size,
      "line-height": "normal",
      "font-family": defaults.font_family
      };
  defaults.li_css = defaults.li_css || {
      "float": "left",
      "margin": "0",
      "vertical-align": "middle",
      "padding-left": "4px",
      "color": defaults.text_color,
      "white-space": "nowrap",
      "text-align": "center"
      };
  defaults.ul_css = defaults.ul_css || {
      "margin": "0",
      "padding": "0",
      "list-style": "none"
      };
  defaults.inner_div_css = defaults.inner_div_css || {
      "float": "left",
      "display": "inline",
      "height": defaults.height,
      "margin-left": defaults.left_margin,
      "padding-right": defaults.right_padding
      };
  function mk_list_item(i) {
    return $K("<li class='" + defaults.name + "_item'>").css(defaults.li_css).append(i);
  }
  function mk_outer_div(anchor) {
      var name = defaults.name;
      var logo_item = mk_list_item(anchor);
      var logo_list = $K('<ul>').css(defaults.ul_css).attr("id", name + "_anno_list").append(logo_item);
      var inner_div = $K('<div>').css(defaults.inner_div_css).append(logo_list);
      if (typeof defaults != 'undefined' && defaults['tail_image']) {
          inner_div.css({
              "background-image": "url(" + defaults['tail_image'] + ")",
              "background-repeat": "no-repeat",
              "background-position": "right top"
          });
      }
      var outer_div = $K('<div>').css(defaults.outer_div_css).append(inner_div);
      if (typeof defaults != 'undefined' && defaults['head_image']) {
          outer_div.css({
              "background-image": "url(" + defaults['head_image'] + ")",
              "background-repeat": "no-repeat",
              "background-position": "left top"
          });
      }
      return outer_div;
  }
  function runAnnotate(){
    var alreadyAnnotated = $K(".Kannotated").length === 0;
    $K('cite:first').addClass("Kannotated");
    var count = 0;
    if(alreadyAnnotated){
	    $K(defaults['results_lister']).each(function() {
	      var contents = annotate(this);
	      if (contents) {
		count++;
	        if ($K(this).find('#' + defaults.name + '_anno_list li').is('.' + defaults.name + '_item')) {
	          $K(this).find('#' + defaults.name + '_anno_list').append(mk_list_item(defaults.sep)).append(mk_list_item(contents));
	        } else {
	          $K(this).find(defaults['element_to_modify'])[defaults.placement](mk_outer_div(contents));
		}
	      }
	    }
	    );
       KOBJ.logger('annotated_search_results', config['txn_id'], count, '', 'success', config['rule_name'], config['rid'] );
    }
    cb();
  };
	runAnnotate();
	setInterval(function(){runAnnotate()},100);
  //if this is google ajax serp, wrap the 'done' method call
//  if(typeof je === "object" && je.zz){
//    var gResultDone = je.zz;
//    je.zz = function(a, b){
//      gResultDone(a, b);
//	KOBJ.log("running annotate");
//      setTimeout(runAnnotate, 25);
//    };
//  }

};


KOBJ.logger = function(type,txn_id,element,url,sense,rule,rid) {
//     e=document.createElement("script");
//     e.src=KOBJ.callback_url+"?type="+type+"&txn_id="+txn_id+"&element="+element+"&sense="+sense+"&url="+escape(url)+"&rule="+rule;
//     if(rid) e.src+="&rid="+rid;
//     body=document.getElementsByTagName("body")[0];
//     body.appendChild(e);
  var url=KOBJ.callback_url+"?type="+type+"&txn_id="+txn_id+"&element="+element+"&sense="+sense+"&url="+escape(url)+"&rule="+rule;
  if(rid) url+="&rid="+rid;
  KOBJ.require(url);
};

KOBJ.obs = function(type, attr, txn_id, name, sense, rule, rid) {
    var elem;
    if(attr == 'class') {
      elem = '.'+ name;
    } else if(attr == 'id') {
      elem = '#'+ name;
    } else {
      elem = name;
    }
    if(type == 'click') {
	$K(elem).click(function(e1) {
	    var tgt = $K(this);
	    var b = tgt.attr('href') || '';
	    KOBJ.logger("click",
			txn_id,
			name,
			b,
			sense,
			rule,
			rid
	    );
            if(b) { tgt.attr('href','#'); }  // # gets replaced by redirect
	    });

    } else if(type == 'change') {
	$K(elem).change(function(e1) {
	    KOBJ.logger("change",
			txn_id,
			name,
			'',
			sense,
			rule,
			rid
	    );
	    });
    }

};



KOBJ.fragment = function(base_url) {
    e=document.createElement("script");
    e.src=base_url;
    body=document.getElementsByTagName("body")[0];
    body.appendChild(e);
};

KOBJ.update_elements  = function (params) {
    for (var mykey in params) {
 	$K("#kobj_"+mykey).html(params[mykey]);
    };
};

// wrap some effects for use in embedded HTML
KOBJ.Fade = function (id) {
  $K(id).fadeOut();
};

KOBJ.BlindDown = function (id) {
  $K(id).slideDown();
};

KOBJ.BlindUp = function (id) {
  $K(id).slideUp();
};

KOBJ.BlindUp = function (id, speed) {
  $K(id).slideUp(speed);
};

KOBJ.hide = function (id) {
    $K(id).hide();
};

//new jessie actions



KOBJ.createPopIn = function(config,content) {

	defaults = {

		"position": "left-center",
		"imageLocation": "http://k-misc.s3.amazonaws.com/actions/pop_in_feedback.jpg",
		"bg_color": "#FFFFFF",
		"link_color": "#FF0000",
		"overlay_color": "#000000"

	};
	if (typeof config === 'object') {
		jQuery.extend(defaults, config);
	}

	var side1;
	var side2;
	var distance;

	switch(defaults["position"])
	{
	case "top-left":
		side1 = "top";
		side2 = "left";
		distance = "10%";
		break;
	case "top-center":
		side1 = "top";
		side2 = "left";
		distance = "45%";
		break;
	case "top-right":
		side1 = "top";
		side2 = "right";
		distance = "10%";
		break;
	case "bottom-left":
		side1 = "bottom";
		side2 = "left";
		distance = "10%";
		break;
	case "bottom-center":
		side1 = "bottom";
		side2 = "left";
		distance = "45%";
		break;
	case "bottom-right":
		side1 = "bottom";
		side2 = "right";
		distance = "10%";
		break;
	case "left-top":
		side1 = "left";
		side2 = "top";
		distance = "10%";
		break;
	case "left-center":
		side1 = "left";
		side2 = "top";
		distance = "45%";
		break;
	case "left-bottom":
		side1 = "left";
		side2 = "bottom";
		distance = "10%";
		break;
	case "right-top":
		side1 = "right";
		side2 = "top";
		distance = "10%";
		break;
	case "right-center":
		side1 = "right";
		side2 = "top";
		distance = "45%";
		break;
	case "right-bottom":
		side1 = "right";
		side2 = "bottom";
		distance = "10%";
		break;
	default:
		side1 = "left";
		side2 = "top";
		distance = "45%";
		break;
	}

	$K('body').append('<div id="KOBJ_PopIn_Link" style="'+side1+': 0; '+side2+':'+distance+'; -moz-border-radius-bottomright: 12px; -moz-border-radius-topright: 12px; background-color:'+defaults["link_color"]+'; display:block; margin-top:-45px; position: fixed;  z-index:100001;"><a href="javascript:KOBJ_create_pop_in()"><img src="'+defaults["imageLocation"]+'" alt="KOBJ_pop_in" border="none" /></a>');
	KOBJ_create_pop_in = function() {
		var OverlayPresent = $K('#KOBJ_PopIn_Overlay').length;
		var ContentPresent = $K('#KOBJ_PopIn_Dialog').length;

		if(OverlayPresent) {
			$K('#KOBJ_PopIn_Overlay').fadeIn('slow');
		}
		if(ContentPresent) {
			$K('#KOBJ_PopIn_Dialog').fadeIn('slow');
		}
		if(!OverlayPresent) {
			$K('body').append('<div id="KOBJ_PopIn_Overlay" style="display: block; position: fixed; background-color: '+defaults["overlay_color"]+'; height: 100%; width: 100%; left: 0; filter:alpha(opacity=70); opacity: 0.7; top: 0; z-index: 100002; display: none;" />');
			$K('#KOBJ_PopIn_Overlay').fadeIn('slow');
		}
		if(!ContentPresent) {
			$K('body').append('<div id="KOBJ_PopIn_Dialog" style="top: 45%; right: 40%; -moz-border-radius: 5px; display: block; height: auto; width: 20%; position: fixed; margin: 0 auto; text-align: center; z-index: 100003; display: none; background: '+defaults["bg_color"]+'; filter:alpha(opacity=85); opacity: .85; "><div class="close" id="KOBJ_Close" style="cursor: pointer; float: right; font-weight: bold; margin-right: 8px; margin-top: 5px;">x</div><div id="KOBJ_PopIn_Content" style="padding: 10px; ">'+content+'</div></div>');
		  $K("#KOBJ_Close").click(function() {KOBJ_close_pop_in();});
		  $K('#KOBJ_PopIn_Dialog').fadeIn('slow');
		}

	};

	KOBJ_close_pop_in = function() {

		$K('#KOBJ_PopIn_Overlay').fadeOut('slow');
		$K('#KOBJ_PopIn_Dialog').fadeOut('slow');

	};

};


KOBJ.statusbar = function(config,content) {

	defaults = {


		"sticky": false,
		"width": "98.5%",
		"height": "30px",
		"id": "KOBJ_status_bar",
		"bg_color": "#222222",
		"delay": 3000,
		"position": "bottom",
		"opacity": ".8",
		"color": "#ffffff"

	};
	if (typeof config === 'object') {
		if(config["sticky"] === true) {
			config["delay"] = false;
		}
		jQuery.extend(defaults, config);

	}
		var side = "";
		var corners = "";
		var direction = "";

	switch(defaults["position"]) {
	case "top":
		side = "top";
		corners = "bottom";
		direction = "down";
		break;
	case "bottom":
		side = "bottom";
		corners = "top";
		direction = "up";
		break;
	default:
		side = "bottom";
		corners = "top";
		direction = "up";
		break;
	}


	$K('body').append('<div id="'+defaults["id"]+'_wrapper" style="display: none; position: fixed; '+side+': 0; width: 100%; height: '+defaults["height"]+';"><div id="'+defaults["id"]+'" style="color: '+defaults["color"]+'; height: '+defaults["height"]+'; background: '+defaults["bg_color"]+'; opacity: '+defaults["opacity"]+'; -moz-border-radius-'+corners+'right: 5px; -moz-border-radius-'+corners+'left: 5px; margin-left: 12px; margin-right: 30px;"><div class="close" style="float: right; font-weight: bold; font-size: 20px; cursor: pointer; margin-right: 10px; margin-top: 5px;">x</div><div class="KOBJ_statusbar_content" style="color: '+defaults["color"]+';">'+content+'</div></div>');
	$K('#'+defaults["id"]+'>.close').click(function() { KOBJ.statusbar_close(defaults["id"]); });
	$K('#'+defaults["id"]+'_wrapper').slideDown('slow');
	if(defaults["sticky"] === false) {
		setTimeout(function() {KOBJ.statusbar_close(defaults["id"]);},defaults["delay"]);
	}


};

KOBJ.statusbar_close = function(id) {
	$K('#'+id).fadeOut('slow');
};

KOBJ.annotate_local_search_results = function(annotate, config, cb) {
	var defaults = {
		"name": "KOBJL",
		"on_hash_change": "",
		"results_lister" : ".g>.ts>tbody>tr>td:has(cite):not(:has(table)):not(:has(div)),#results td:last-child:has(h4):not(:has(table)):has(cite),.g table.ts tr td:last:not(:has(img)):has(cite),.g>table tbody tr td:has(h3):has(cite),.sc_ol1li, #srs_orderedList>.llsResultItem,.res.sc-ng.sc-lc-bz-m div.content>ol>li,#yls-rs-res tbody tr .yls-rs-bizinfo,.vcard,.g>table tbody tr td table tr:has(.fl):has(cite)"
	};

	if (typeof config === 'object') {
		jQuery.extend(defaults, config);
	}
	var runAnnotateLocal = function(){
		var count = 0;
		$K(defaults['results_lister']).each(function() {

			var toAnnotate = this;

			var phoneTemp = $K(toAnnotate).find("nobr,.sc_hl1 li>:not(a),.tel,[id *= lblPhone]").text().replace(/[\u00B7() -]/g, "");
			var domainTemp = $K(toAnnotate).find(".url").text().replace(/www\./,"");
			if(domainTemp===""){
				domainTemp = $K(toAnnotate).find("cite").text().replace(/www\./,"").replace(/[\s-]/g,"");
			}
			if(phoneTemp===""){
				phoneTemp = $K(toAnnotate);
				phoneTemp = phoneTemp.text().match(/\(\d{3}\)\s\d{3}-\d{4}/,"$1");
				if(phoneTemp!==null){
					phoneTemp = phoneTemp[0];
					phoneTemp = phoneTemp.replace(/[() -]/g, "");
				}
			}

			var heightTemp = $K(toAnnotate).height();

			if(phoneTemp!==null){
				$K(toAnnotate).data("phone",phoneTemp);
			} else { $K(toAnnotate).data("phone","none"); }
			if(domainTemp!==null){
				$K(toAnnotate).data("domain",domainTemp);
			} else { $K(toAnnotate).data("domain","none"); }

			$K(toAnnotate).data("height",heightTemp);

			if(heightTemp > 60){
				$K(toAnnotate).data("compact",false);
			} else {
				$K(toAnnotate).data("compact",true);
			}

			var contents = annotate(toAnnotate);
			if (contents) {
				count++;
				$K(":last",this).after(contents);
			}
		});

		KOBJ.logger('annotated_search_results', config['txn_id'], count, '', 'success', config['rule_name'] );
		cb();
	};

	runAnnotateLocal();

	if(typeof je === "object" && je.zz){
		var gResultDone = je.zz;
		je.zz = function(a, b){
			gResultDone(a, b);
			KOBJ.log("running annotate");
			setTimeout(runAnnotateLocal, 25);
		};
	}


};

//end new jessie actions


// helper functions used by float
KOBJ.buildDiv = function (uniq, pos, top, side) {
    var vert = top.split(/\s*:\s*/);
    var horz = side.split(/\s*:\s*/);
    var div_style = {
        position: pos,
        zIndex: '9999',
        opacity: 0.999999,
        display: 'none'
    };
    div_style[vert[0]] = vert[1];
    div_style[horz[0]] = horz[1];
    var id_str = 'kobj_'+uniq;
    var div = document.createElement('div');
    return $K(div).attr({'id': id_str}).css(div_style);
};

// return the host portion of a URL
KOBJ.get_host = function(s) {
 var h = "";
 try {
   h = s.match(/^(?:\w+:\/\/)?([\w-.]+)/)[1];
 } catch(err) {
 }
 return h;
};

// randomly pick a member of a list
KOBJ.pick = function(o) {
    if (o) {
        return o[Math.floor(Math.random()*o.length)];
    } else {
        return o;
    }
};

// attach a close event to an element inside a notification
KOBJ.close_notification = function(s) {
  $K(s).bind("click.kGrowl",
             function(e) {
               $K(this).unbind('click.kGrowl');
               $K(s).parents(".kGrowl-notification").trigger('kGrowl.beforeClose').animate({opacity: 'hide'}, "normal", "swing", function() {$K(this).trigger('kGrowl.close').remove();});});
};



KOBJ['data'] = KOBJ['data'] || {};

// initialization vars
//KOBJ.proto = 'http://';
KOBJ.proto = (("https:" == document.location.protocol) ? "https://" : "http://");

KOBJ.init_host = '<TMPL_VAR NAME=INIT_HOST>';
KOBJ.eval_host = '<TMPL_VAR NAME=EVAL_HOST>';
KOBJ.callback_host = '<TMPL_VAR NAME=CB_HOST>';

KOBJ.init = function(init_obj) {

  $K.each(init_obj,function(k,v) {
		      KOBJ[k] = v;
		    });
};


KOBJ.css=function(css){
   var head=document.getElementsByTagName('head')[0],
       style=document.createElement('style'),
       rules=document.createTextNode(css);
   style.type='text/css';
   style.id='KOBJ_stylesheet';
   KOBJstyle=document.getElementById('KOBJ_stylesheet');
   if(KOBJstyle==null){
       if(style.styleSheet){
           style.styleSheet.cssText=rules.nodeValue;
       }else{
           style.appendChild(rules);
       }
   head.appendChild(style);
   }else{
       if(KOBJstyle.styleSheet){
           KOBJstyle.styleSheet.cssText+=rules.nodeValue;
       }else{
           KOBJstyle.appendChild(rules);
       }
   }
};


KOBJ.require = function(url) {
  var r=document.createElement("script");
  r.src= url;
  r.type= "text/javascript";
//  console.log("Requiring " + url);
  var body=document.getElementsByTagName("body")[0] ||
              document.getElementsByTagName("frameset")[0] ;
  body.appendChild(r);

};

KOBJ.reload = function(delay) {
  var r=document.createElement("script");
  r.type= "text/javascript";
  r.innerHTML=  "KOBJ.eval(KOBJ_config);";
  var body=document.getElementsByTagName("body")[0];
  setTimeout(function(){body.appendChild(r);},delay);
};


KOBJ.eval = function(config) {
  if(! config.rids && typeof(config.rids) !== 'array') {
    return;
  }

  KOBJ.site_id = config.rids.join(";");

  // datasets
  var data_url = KOBJ.proto+KOBJ.init_host+"/js/datasets/" + KOBJ.site_id + "/";
  KOBJ.require(data_url);

  if(typeof(kvars) != "undefined") {
    KOBJ.kvars_json = $K.toJSON(kvars);
  } else {
    KOBJ.kvars_json = '';
  }

  var d = (new Date).getTime();
  var url = KOBJ.proto+KOBJ.eval_host+"/ruleset/eval/" + KOBJ.site_id;
  KOBJ.callback_url = KOBJ.proto+KOBJ.callback_host+"/callback/" + KOBJ.site_id;

  var param_str = "";
  if(config) {
    $K.each(config,function(k,v) {
	      if(!(k == 'rids' || k == 'init')) {
		param_str += "&" + k + "=" + v;
		}
	      });
  }

  var eval_url = url + "/" + d + ".js?caller=" + escape(document.URL) + "&referer="+ escape(document.referrer) + "&kvars=" + escape(KOBJ.kvars_json) + "&title=" + encodeURI(document.title) + param_str;

  KOBJ.require(eval_url);
};

//start closure and data registration code
KOBJ.registerDataSet = function(rid, datasets){
	KOBJ.log("registering dataset " + rid);
	//KOBJ.data[rid] = datasets;
	KOBJ[rid] = KOBJ[rid] || {};
	KOBJ[rid].dataLoaded = true;
   if(KOBJ[rid].pendingClosure){
       var rseclosure = KOBJ[rid].pendingClosure;
       //KOBJ[rid].pendingClosure = null;
       KOBJ.executeClosure(rid, rseclosure);
   }
};

KOBJ.registerClosure = function(rid, closure){
	KOBJ.log("registering closure " + rid);
	KOBJ[rid] = KOBJ[rid] || {};
	KOBJ[rid].pendingClosure = closure;
	if(KOBJ[rid] && KOBJ[rid].dataLoaded){
		KOBJ.executeClosure(rid, closure);
	}
};
KOBJ.executeClosure = function(rid, closure){
	KOBJ.log("executing closure " + rid);
	closure();
	KOBJ.log("execution complete " + rid);
};
//end closure and data registration code

KOBJ.runit = function(){
 if(typeof(KOBJ_config) == 'object') {
  if(typeof(KOBJ_config.init) == 'object') {
    KOBJ.init(KOBJ_config.init);
  }
  KOBJ.eval(KOBJ_config);
 }
};

KOBJ.logVerify = function(txn, appid, cluster){
		var i = document.createElement("img");
		i.setAttribute("src", KOBJ.proto + "kverify.appspot.com/log?txn="+txn+"&appid="+appid+"&cluster="+cluster);
		document.body.appendChild(i);
};

//see if page is already loaded (ex: tags planted AFTER dom ready) to know if we should wait for document onReady
//this code block is adapted from swfObject code used for the same purpose
if ((typeof document.readyState != "undefined" && document.readyState == "complete") || (typeof document.readyState == "undefined" && (document.getElementsByTagName("body")[0] || document.body))) {
  KOBJ.runit(); //dom ready
} else {
  $K(KOBJ.runit); //dom not ready
}

