


;

var $K = jQuery.noConflict();


var KOBJ= KOBJ ||
  { name: "KRL Runtime Library",
    version: '0.9',
    copyright: "Copyright 2007-2009, Kynetx Inc.  All Rights reserved."
  };


KOBJ.annotate_search_results = function(annotate, config, cb) {
  var defaults = {
    "name": "KOBJ",
    "sep": "<div style='padding-top: 13px'>|</div>",
    "text_color": "#CCC",
    "height": "40px",
    "left_margin": "15px",
    "right_padding": "15px",
    "font_size": "12px",
    "font_family": "Verdana, Geneva, sans-serif",
    "results_lister" : "li.g, div.g, li div.res, #results>ul>li",
    "element_to_modify" : "div.s,div.abstr,p",
    "placement" : 'prepend',
    "outer_div_css" : 0,
    "inner_div_css" : 0,
    "li_css" : 0,
    "ul_css" : 0
  };
  if (typeof config === 'object') {
      jQuery.extend(defaults, config);
  }
  // these have to occur after the config has been updated
  defaults.outer_div_css = defaults.outer_div_css || {
      "float": "right",
      "width": "auto",
      "height": defaults.height,
      "font-size": defaults.font_size,
      "line-height": "normal",
      "font-family": defaults.font_family
      };
  defaults.li_css = defaults.li_css || {
      "float": "left",
      "margin": "0",
      "vertical-align": "middle",
      "padding-left": "4px",
      "color": defaults.text_color,
      "white-space": "nowrap",
      "text-align": "center"
      };
  defaults.ul_css = defaults.ul_css || {
      "margin": "0",
      "padding": "0",
      "list-style": "none"
      };
  defaults.inner_div_css = defaults.inner_div_css || {
      "float": "left",
      "display": "inline",
      "height": defaults.height,
      "margin-left": defaults.left_margin,
      "padding-right": defaults.right_padding
      };
  function mk_list_item(i) {
    return $K("<li class='" + defaults.name + "_item'>").css(defaults.li_css).append(i);
  }
  function mk_outer_div(anchor) {
      var name = defaults.name;
      var logo_item = mk_list_item(anchor);
      var logo_list = $K('<ul>').css(defaults.ul_css).attr("id", name + "_anno_list").append(logo_item);
      var inner_div = $K('<div>').css(defaults.inner_div_css).append(logo_list);
      if (typeof defaults != 'undefined' && defaults['tail_image']) {
          inner_div.css({
              "background-image": "url(" + defaults['tail_image'] + ")",
              "background-repeat": "no-repeat",
              "background-position": "right top"
          });
      }
      var outer_div = $K('<div>').css(defaults.outer_div_css).append(inner_div);
      if (typeof defaults != 'undefined' && defaults['head_image']) {
          outer_div.css({
              "background-image": "url(" + defaults['head_image'] + ")",
              "background-repeat": "no-repeat",
              "background-position": "left top"
          });
      }
      return outer_div;
  }
  function runAnnotate(){
//    $K('#res div:first ol, #web').addClass("Kannotated");
    var count = 0;
    $K(defaults['results_lister']).each(function() {
      var contents = annotate(this);
      if (contents) {
	count++;
        if ($K(this).find('#' + defaults.name + '_anno_list li').is('.' + defaults.name + '_item')) {
          $K(this).find('#' + defaults.name + '_anno_list').append(mk_list_item(defaults.sep)).append(mk_list_item(contents));
        } else {
          $K(this).find(defaults['element_to_modify'])[defaults.placement](mk_outer_div(contents));
	}
      }
    }
    );
    KOBJ.logger('annotated_search_results', config['txn_id'], count, '', 'success', config['rule_name'] );
    cb();
  };
  runAnnotate();
  //if this is google ajax serp, wrap the 'done' method call
  if(typeof je === "object" && je.zz){
    var gResultDone = je.zz;
    je.zz = function(a, b){
      gResultDone(a, b);
      runAnnotate();
    };
  }
};



KOBJ.logger = function(type,txn_id,element,url,sense,rule) {
    e=document.createElement("script");
    e.src=KOBJ.callback_url+"?type="+type+"&txn_id="+txn_id+"&element="+element+"&sense="+sense+"&url="+escape(url)+"&rule="+rule;
    body=document.getElementsByTagName("body")[0];
    body.appendChild(e);
};

KOBJ.obs = function(type, txn_id, name, sense, rule) {
    if(type == 'class') {
	$K('.'+name).click(function(e1) {
	    var tgt = $K(this);
	    var b = tgt.attr('href') || '';
	    KOBJ.logger("click",
			txn_id,
			name,
			b,
			sense,
			rule
	    );
            if(b) { tgt.attr('href','#'); }  // # gets replaced by redirect
	    });
    } else {
	$K('#'+name).click(function(e1) {
	    var tgt = $K(this);
	    var b = tgt.attr('href') || '';
	    KOBJ.logger("click",
			txn_id,
			name,
			b,
			sense,
			rule
	    );
            if(b) { tgt.attr('href','#'); }  // # gets replaced by redirect
	    });
    }
};



KOBJ.fragment = function(base_url) {
    e=document.createElement("script");
    e.src=base_url;
    body=document.getElementsByTagName("body")[0];
    body.appendChild(e);
};

KOBJ.update_elements  = function (params) {
    for (var mykey in params) {
 	$K("#kobj_"+mykey).html(params[mykey]);
    };
};

// wrap some effects for use in embedded HTML
KOBJ.Fade = function (id) {
  $K(id).fadeOut();
};

KOBJ.BlindDown = function (id) {
  $K(id).slideDown();
};

KOBJ.BlindUp = function (id) {
  $K(id).slideUp();
};

KOBJ.BlindUp = function (id, speed) {
  $K(id).slideUp(speed);
};

KOBJ.hide = function (id) {
    $K(id).hide();
};

// helper functions used by float
KOBJ.buildDiv = function (uniq, pos, top, side) {
    var vert = top.split(/\s*:\s*/);
    var horz = side.split(/\s*:\s*/);
    var div_style = {
        position: pos,
        zIndex: '9999',
        opacity: 0.999999,
        display: 'none'
    };
    div_style[vert[0]] = vert[1];
    div_style[horz[0]] = horz[1];
    var id_str = 'kobj_'+uniq;
    var div = document.createElement('div');
    return $K(div).attr({'id': id_str}).css(div_style);
};

// return the host portion of a URL
KOBJ.get_host = function(s) {
 var h = "";
 try {
   h = s.match(/^(?:\w+:\/\/)?([\w-.]+)/)[1];
 } catch(err) {
 }
 return h;
};

// randomly pick a member of a list
KOBJ.pick = function(o) {
    if (o) {
        return o[Math.floor(Math.random()*o.length)];
    } else {
        return o;
    }
};

// attach a close event to an element inside a notification
KOBJ.close_notification = function(s) {
  $K(s).bind("click.kGrowl",
             function(e) {
               $K(this).unbind('click.kGrowl');
               $K(s).parents(".kGrowl-notification").trigger('kGrowl.beforeClose').animate({opacity: 'hide'}, "normal", "swing", function() {$K(this).trigger('kGrowl.close').remove();});});
};



KOBJ['data'] = KOBJ['data'] || {};

// initialization vars
//KOBJ.proto = 'http://';
KOBJ.proto = (("https:" == document.location.protocol) ? "https://" : "http://");

KOBJ.init_host = '<TMPL_VAR NAME=INIT_HOST>';
KOBJ.eval_host = '<TMPL_VAR NAME=EVAL_HOST>';
KOBJ.callback_host = '<TMPL_VAR NAME=CB_HOST>';

KOBJ.init = function(init_obj) {

  $K.each(init_obj,function(k,v) {
		      KOBJ[k] = v;
		    });
};


KOBJ.css=function(css){
   var head=document.getElementsByTagName('head')[0],
       style=document.createElement('style'),
       rules=document.createTextNode(css);
   style.type='text/css';
   style.id='KOBJ_stylesheet';
   KOBJstyle=document.getElementById('KOBJ_stylesheet');
   if(KOBJstyle==null){
       if(style.styleSheet){
           style.styleSheet.cssText=rules.nodeValue;
       }else{
           style.appendChild(rules);
       }
   head.appendChild(style);
   }else{
       if(KOBJstyle.styleSheet){
           KOBJstyle.styleSheet.cssText+=rules.nodeValue;
       }else{
           KOBJstyle.appendChild(rules);
       }
   }
}; 


KOBJ.require = function(url) {
  var r=document.createElement("script");
  r.src= url;
  r.type= "text/javascript";
  var body=document.getElementsByTagName("body")[0];
  body.appendChild(r);
};

KOBJ.reload = function(delay) {
  var r=document.createElement("script");
  r.type= "text/javascript";
  r.innerHTML=  "KOBJ.eval(KOBJ_config);";
  var body=document.getElementsByTagName("body")[0];
  setTimeout(function(){body.appendChild(r);},delay);
};


KOBJ.eval = function(params) {
  if(! params.rids && typeof(params.rids) !== 'array') {
    return;
  }

  KOBJ.site_id = params.rids.join(";");

  // datasets
  var data_url = KOBJ.proto+KOBJ.init_host+"/js/datasets/" + KOBJ.site_id + "/";
  KOBJ.require(data_url);

  if(typeof(kvars) != "undefined") {
    KOBJ.kvars_json = $K.toJSON(kvars);
  } else {
    KOBJ.kvars_json = '';
  }

  var d = (new Date).getTime();
  var url = KOBJ.proto+KOBJ.eval_host+"/ruleset/eval/" + KOBJ.site_id;
  KOBJ.callback_url = KOBJ.proto+KOBJ.callback_host+"/callback/" + KOBJ.site_id;

  var param_str = "";
  if(params) {
    $K.each(params,function(k,v) {
	      if(!(k == 'rids' || k == 'init')) {
		param_str += "&" + k + "=" + v;
		}
	      });
  }

  var eval_url = url + "/" + d + ".js?caller=" + escape(document.URL) + "&referer="+ escape(document.referrer) + "&kvars=" + escape(KOBJ.kvars_json) + "&title=" + encodeURI(document.title) + param_str;

//    $K('<script type="text/javascript">').attr(
//         {"src": eval_url}).appendTo("body");

// dummy up the Firebug console commands so a rogue console call doesn't kill code
  // if (!window.console || !console.firebug) {
  //   var names = ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml",
  //   "group", "groupEnd", "time", "timeEnd", "count", "trace", "profile", "profileEnd"];
  //   window.console = {};
  //   for (var i = 0; i < names.length; ++i)
  //      window.console[names[i]] = function() {}
  // }

  KOBJ.require(eval_url);
};

//start closure and data registration code
KOBJ.registerDataSet = function(rid, datasets){
   //KOBJ.data[rid] = datasets;
	KOBJ[rid] = KOBJ[rid] || {};
	KOBJ[rid].dataLoaded = true;
   if(KOBJ[rid].pendingClosure){
       var rseclosure = KOBJ[rid].pendingClosure;
       KOBJ[rid].pendingClosure = null;
       KOBJ.executeClosure(rid, rseclosure);
   }
};

KOBJ.registerClosure = function(rid, closure){
	if(KOBJ[rid] && KOBJ[rid].dataLoaded){
		KOBJ.executeClosure(rid, closure);
	} else {
		KOBJ[rid] = KOBJ[rid] || {};
		KOBJ[rid].pendingClosure = closure;
	}
};
KOBJ.executeClosure = function(rid, closure){
	closure();
};
//end closure and data registration code

KOBJ.runit = function(){
 if(typeof(KOBJ_config) == 'object') {
  if(typeof(KOBJ_config.init) == 'object') {
    KOBJ.init(KOBJ_config.init);
  }
  KOBJ.eval(KOBJ_config);
 }
};

//see if page is already loaded (ex: tags planted AFTER dom ready) to know if we should wait for document onReady
//this code block is adapted from swfObject code used for the same purpose
if ((typeof document.readyState != "undefined" && document.readyState == "complete") || (typeof document.readyState == "undefined" && (document.getElementsByTagName("body")[0] || document.body))) {
  KOBJ.runit(); //dom ready
} else {
  $K(KOBJ.runit); //dom not ready
}

