#
# Kynetx KOBJ Apache configuration
# 
# do not edit this file; auto-generated by install-httpd-conf.pl
#
# Timestamp: <TMPL_VAR NAME=GEN_DATE>
#

ServerRoot "/web"

#
# Listen: Allows you to bind Apache to specific IP addresses and/or
# ports, instead of the default. See also the <VirtualHost>
# directive.
#
# Change this to Listen on specific IP addresses as shown below to 
# prevent Apache from glomming onto all bound IP addresses.
#
#Listen 12.34.56.78:80
Listen 80

#
# Dynamic Shared Object (DSO) Support
#

<IfModule !perl_module>
LoadModule perl_module modules/mod_perl.so
</ifModule>

LoadModule deflate_module modules/mod_deflate.so
LoadModule expires_module modules/mod_expires.so
LoadModule headers_module modules/mod_headers.so

<TMPL_IF NAME="GENDER_KRL">
LoadModule dav_module   modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
LoadModule authz_svn_module   modules/mod_authz_svn.so
</TMPL_IF>

<IfModule !mpm_netware_module>
User web
Group web
</IfModule>

ServerAdmin web@kynetx.com

#ServerName init.kobj.net:80

DocumentRoot "/web/htdocs"

<Directory />
    Options FollowSymLinks
    AllowOverride None
    Order deny,allow
    Deny from all
</Directory>

#
# This should be changed to whatever you set DocumentRoot to.
# This is VERY restrictive since we won't be serving up static
# content other than JS files
#
<Directory "/web/htdocs">
    Options None
    AllowOverride None
    Order allow,deny
    Allow from all

<IfModule mod_rewrite.c>
RewriteEngine on
#    RewriteLog "/web/logs/rewrite.log"
#    RewriteLogLevel 5

# handle categories
RewriteRule	  !^.*\.js$	$1 [R]
RewriteRule   ^(.*)$ http://www.kynetx.com/kobj/index.shtml


</IfModule>

</Directory>

#
# DirectoryIndex: sets the file that Apache will serve if a directory
# is requested.
#
<IfModule dir_module>
    DirectoryIndex index.html
</IfModule>

#
# The following lines prevent .htaccess and .htpasswd files from being 
# viewed by Web clients. 
#
<FilesMatch "^\.ht">
    Order allow,deny
    Deny from all
    Satisfy All
</FilesMatch>

# logging all happens in the http-perl.conf file

<IfModule alias_module>
    #
    # Redirect: Allows you to tell clients about documents that used to 
    # exist in your server's namespace, but do not anymore. The client 
    # will make a new request for the document at its new location.
    # Example:
    # Redirect permanent /foo http://www.example.com/bar

Redirect permanent /index.html http://www.kynetx.com/kobj/index.html

    #
    # Alias: Maps web paths into filesystem paths and is used to
    # access content that does not live under the DocumentRoot.
    # Example:
    # Alias /webpath /full/filesystem/path
    #
    # If you include a trailing / on /webpath then the server will
    # require it to be present in the URL.  You will also likely
    # need to provide a <Directory> section to allow access to
    # the filesystem path.

    #
    # ScriptAlias: This controls which directories contain server scripts. 
    # ScriptAliases are essentially the same as Aliases, except that
    # documents in the target directory are treated as applications and
    # run by the server when requested rather than as documents sent to the
    # client.  The same rules about trailing "/" apply to ScriptAlias
    # directives as to Alias.
    #
#    ScriptAlias /cgi-bin/ "/web/cgi-bin/"

</IfModule>

# DefaultType: the default MIME type the server will use for a document
# if it cannot otherwise determine one, such as from filename extensions.
DefaultType text/javascript

<IfModule mime_module>
    #
    # TypesConfig points to the file containing the list of mappings from
    # filename extension to MIME-type.
    #
    TypesConfig conf/mime.types

    #
    # AddType allows you to add to or override the MIME configuration
    # file specified in TypesConfig for specific file types.
    #
    #AddType application/x-gzip .tgz
    #
    # AddEncoding allows you to have certain browsers uncompress
    # information on the fly. Note: Not all browsers support this.
    #
    #AddEncoding x-compress .Z
    #AddEncoding x-gzip .gz .tgz
    #
    # If the AddEncoding directives above are commented-out, then you
    # probably should define those extensions to indicate media types:
    #
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz

    #
    # AddHandler allows you to map certain file extensions to "handlers":
    # actions unrelated to filetype. These can be either built into the server
    # or added with the Action directive (see below)
    #
    # To use CGI scripts outside of ScriptAliased directories:
    # (You will also need to add "ExecCGI" to the "Options" directive.)
    #
    # AddHandler cgi-script .cgi

    # For type maps (negotiated resources):
    #AddHandler type-map var

    #
    # Filters allow you to process content before it is sent to the client.
    #
    # To parse .shtml files for server-side includes (SSI):
    # (You will also need to add "Includes" to the "Options" directive.)
    #
    #AddType text/html .shtml
    #AddOutputFilter INCLUDES .shtml
</IfModule>

#
# Customizable error responses come in three flavors:
# 1) plain text 2) local redirects 3) external redirects
#
# Some examples:
#ErrorDocument 500 "The server made a boo boo."
ErrorDocument 404 http://www.kynetx.com/kobj/index.html
#ErrorDocument 404 "/cgi-bin/missing_handler.pl"
#ErrorDocument 402 http://www.example.com/subscription_info.html
#

#
# Supplemental configuration
#
# Server-pool management (MPM specific)
Include conf/extra/httpd-mpm.conf

# Real-time info on requests and configuration
Include conf/extra/httpd-info.conf

# Secure (SSL/TLS) connections
#Include conf/extra/httpd-ssl.conf
#
# Note: The following must must be present to support
#       starting without SSL on platforms with no /dev/random equivalent
#       but a statically compiled-in mod_ssl.
#
<IfModule ssl_module>
SSLRandomSeed startup builtin
SSLRandomSeed connect builtin
</IfModule>

# Perl stuff specific to Kynetx module implementation

LoadModule apreq_module /web/modules/mod_apreq2.so

PerlRequire <TMPL_VAR NAME=KOBJ_ROOT>/startup.pl

# support client IP address in XFF header, if needed
# PerlSetVar  xForwardedForRequire 1  # only work behind a proxy...
PerlPostReadRequestHandler Apache2::xForwardedFor

#
# We set up logging for various servers differently depending on type
# Which logging happens depends on conditional logging via an env var
# Env vars are set in the sections specific to each server type below
#

# error logging, unconditional
ErrorLog "|/web/sbin/cronolog --symlink=/web/logs/error_log /web/logs/%Y/%m/%d/errors.log"
# LogLevel: Control the number of messages logged to the error_log.
LogLevel warn

# logging for INIT
LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
CustomLog "|/web/sbin/cronolog --period=<TMPL_VAR NAME=LOG_PERIOD> --symlink=/web/logs/init_log /web/logs/kynetx/INIT-%Y%m%d-%H%M.log" combined env=INIT

# rule logging for CS
LogFormat "%h %t %{TOTAL_SECS}e %{SITE}e  %{TXN_ID}e \"%{RULE_NAME}e\" \"%{CALLER}e\" %{SESSION_ID}e %{IP}e \"%{REFERER}e\" \"%{TITLE}e\" %{ACTIONS}e " KOBJ
CustomLog "|/web/sbin/cronolog --period=<TMPL_VAR NAME=LOG_PERIOD> --symlink=/web/logs/kynetx_log /web/logs/kynetx/KOBJ-%Y%m%d-%H%M.log" KOBJ env=KOBJ

# callback logging for LOG
LogFormat "%h %t %{TOTAL_SECS}e %{SITE}e %{TXN_ID}e \"%{RULE_NAME}e\" \"%{CALLER}e\" %{SESSION_ID}e %{TYPE}e \"%{ELEMENT}e\" \"%{SENSE}e\" " CB
CustomLog "|/web/sbin/cronolog --period=<TMPL_VAR NAME=LOG_PERIOD> --symlink=/web/logs/callback_log /web/logs/kynetx/CB-%Y%m%d-%H%M.log" CB env=CB


<TMPL_IF NAME="GENDER_ACTION">
<LocationMatch /kobj/>

  # env var to turn on rule logging
  PerlSetEnv KOBJ 1 

  # Eventually this ought to come from the client configuration DB
  PerlSetVar kobj_js_version <TMPL_VAR NAME=JS_VERSION>

  # host names
  PerlSetVar init_host <TMPL_VAR NAME=INIT_HOST>
  PerlSetVar log_host <TMPL_VAR NAME=LOG_HOST>
  PerlSetVar action_host <TMPL_VAR NAME=ACTION_HOST>

  # mode => development, production, test
  PerlSetVar run_mode <TMPL_VAR NAME=RUN_MODE>

  # database configuration
  PerlSetVar db_host <TMPL_VAR NAME=DB_HOST>
  PerlSetVar db_username <TMPL_VAR NAME=DB_USERNAME>
  PerlSetVar db_passwd <TMPL_VAR NAME=DB_PASSWD>

  <TMPL_IF NAME="MEMCACHED">
  PerlSetVar memcached_hosts <TMPL_VAR NAME=MEMCACHED_HOST_FIRST>
  <TMPL_LOOP NAME="MEMCACHED_HOSTS">
  PerlAddVar memcached_hosts <TMPL_VAR NAME=MEMCACHED_HOST>
  </TMPL_LOOP>
  </TMPL_IF>


  # URL for svn rule repository, username, password
  PerlSetVar svn_conn <TMPL_VAR NAME=RULE_REPOSITORY>

  SetHandler perl-script
  PerlHandler Kynetx
</LocationMatch>

</TMPL_IF>
<TMPL_IF NAME="GENDER_LOG">
<LocationMatch /log/>
  # env var to turn on callback logging
  PerlSetEnv CB 1 

  # host names
  PerlSetVar init_host <TMPL_VAR NAME=INIT_HOST>
  PerlSetVar log_host <TMPL_VAR NAME=LOG_HOST>
  PerlSetVar action_host <TMPL_VAR NAME=ACTION_HOST>

  # database configuration
  PerlSetVar db_host <TMPL_VAR NAME=DB_HOST>
  PerlSetVar db_username <TMPL_VAR NAME=DB_USERNAME>
  PerlSetVar db_passwd <TMPL_VAR NAME=DB_PASSWD>


  # mode => development, production, test
  PerlSetVar run_mode <TMPL_VAR NAME=RUN_MODE>

  SetHandler perl-script
  PerlHandler Kynetx::Logger
</LocationMatch>

</TMPL_IF>
<TMPL_IF NAME="GENDER_INIT">
<LocationMatch /js/>

  # Insert compression filter
  SetOutputFilter DEFLATE
  # Netscape 4.x has some problems...
  BrowserMatch ^Mozilla/4 gzip-only-text/html
  # Netscape 4.06-4.08 have some more problems
  BrowserMatch ^Mozilla/4\.0[678] no-gzip
  # MSIE masquerades as Netscape, but it is fine
  BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
  # Don't compress images
  SetEnvIfNoCase Request_URI \
      \.(?:gif|jpe?g|png)$ no-gzip dont-vary
  # Make sure proxies don't deliver the wrong content
  Header append Vary User-Agent env=!dont-vary  
  # end configuring compression filter

  # send an expires header
  ExpiresActive On
  ExpiresDefault "access plus 1 day"

  # env var to turn on INIT logging
  PerlSetEnv INIT 1 

  # Eventually this ought to come from the client configuration DB
  PerlSetVar kobj_js_version <TMPL_VAR NAME=JS_VERSION>

  # Where do I get the static JS files to serve?
  PerlSetVar kobj_js_root <TMPL_VAR NAME=KOBJ_ROOT>/etc/js

  # host names
  PerlSetVar init_host <TMPL_VAR NAME=INIT_HOST>
  PerlSetVar log_host <TMPL_VAR NAME=LOG_HOST>
  PerlSetVar action_host <TMPL_VAR NAME=ACTION_HOST>

  # mode => development, production, test
  PerlSetVar run_mode <TMPL_VAR NAME=RUN_MODE>

  SetHandler perl-script
  PerlHandler Kynetx::KOBJ
</LocationMatch>

</TMPL_IF>

<TMPL_IF NAME="GENDER_KRL">
<LocationMatch /manage/>
  # Eventually this ought to come from the client configuration DB

  # host names
  PerlSetVar init_host <TMPL_VAR NAME=INIT_HOST>
  PerlSetVar log_host <TMPL_VAR NAME=LOG_HOST>
  PerlSetVar action_host <TMPL_VAR NAME=ACTION_HOST>
  PerlSetVar krl_host <TMPL_VAR NAME=KRL_HOST>

  # mode => development, production, test
  PerlSetVar run_mode <TMPL_VAR NAME=RUN_MODE>

  SetHandler perl-script
  PerlHandler Kynetx::RuleManager
</LocationMatch>

DavLockDB "/web/var/DavLock"

<Location /krl>

  DAV svn

  SVNPath /web/svn/krl/

  AuthType Basic

  AuthName "KRL repository"

  AuthUserFile /web/svn/krl/conf/svn-auth-file

  Require valid-user

</Location>



</TMPL_IF>

Alias /widgets/ "/web/widgets/"
<Location /widgets>
      SetHandler perl-script
      PerlResponseHandler ModPerl::Registry
      PerlOptions +ParseHeaders
      Options +ExecCGI
      Order allow,deny
      Allow from all 
</Location>
